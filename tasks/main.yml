---
- name: Include OS-specific variables.
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"

- name: Set machine hostname
  ansible.builtin.hostname:
      name: "{{ inventory_hostname_short | lower | regex_replace('_', '') }}"

- name: Set timezone to Europe/Paris
  community.general.timezone:
      name: Europe/Paris
  notify:
      - Restart cron

- name: Never include APT phased update
  ansible.builtin.copy:
      src: apt-phased-updates
      dest: /etc/apt/apt.conf.d/99-Phased-Updates
      owner: root
      group: root
      mode: '0644'
  when: ansible_os_family == "Debian"

- name: Debian Update repo and upgrade installed packages
  ansible.builtin.apt:
      update_cache: true
      upgrade: full
      autoremove: true
      force: true
      install_recommends: false
  async: 1200
  poll: 20
  when: not ansible_check_mode and ansible_os_family == "Debian"

- name: Debian check Update repo and upgrade installed packages
  ansible.builtin.apt:
      update_cache: true
      upgrade: full
      autoremove: true
      force: true
      install_recommends: false
  when: ansible_check_mode and ansible_os_family == "Debian"

- name: RedHat Update repo and upgrade installed packages
  ansible.builtin.yum:
      update_cache: true
      name: '*'
      state: latest
  when: ansible_os_family == "RedHat"

- name: Remove unecessary packages if present
  ansible.builtin.apt:
      name: "{{ packages_to_remove }}"
      autoremove: true
      purge: true
      state: absent
  when: ansible_os_family == "Debian"

- name: Remove unecessary files if present
  ansible.builtin.file:
      path: "{{ item }}"
      state: absent
  when: ansible_os_family == "Debian"
  with_items: "{{ files_to_remove }}"

- name: Remove unecessary users if present
  ansible.builtin.user:
      name: "{{ item }}"
      remove: true
      state: absent
  with_items: "{{ users_to_remove }}"

- name: Disable dynamic motd news
  ansible.builtin.lineinfile:
      name: "/etc/default/motd-news"
      regexp: "ENABLED=1"
      line: "ENABLED=0"
      mode: '0644'
  when: ansible_os_family == "Debian"
  ignore_errors: true

- name: Copy nosnap file
  ansible.builtin.copy:
      src: nosnap
      dest: /etc/apt/preferences.d/nosnap
      owner: root
      group: root
      mode: '0644'
  when: ansible_os_family == "Debian"

- name: Remove Unattended Upgrades
  ansible.builtin.apt:
      name: "unattended-upgrades"
      autoremove: true
      purge: true
      state: absent
  when: ansible_os_family == "Debian" and inventory_hostname not in groups.maintenance_contract
  tags: unattended-upgrade

- name: Install Unattended Upgrades
  ansible.builtin.apt:
      name: "unattended-upgrades"
      state: present
  when: ansible_os_family == "Debian" and inventory_hostname in groups.maintenance_contract
  tags: unattended-upgrade

- name: Enable apt auto upgrades
  ansible.builtin.copy:
      src: apt-auto-upgrades
      dest: /etc/apt/apt.conf.d/20auto-upgrades
      owner: root
      group: root
      mode: '0644'
  when: ansible_os_family == "Debian"

- name: Copy Unattended Upgrades configuration
  ansible.builtin.template:
      src: 'apt-unattended-upgrades.j2'
      dest: '/etc/apt/apt.conf.d/50unattended-upgrades'
      owner: root
      group: root
      mode: '0644'
  when: inventory_hostname in groups.maintenance_contract
  tags: unattended-upgrade

- name: Create apt-daily timer directory if it does not exist
  ansible.builtin.file:
      path: '/etc/systemd/system/apt-daily.timer.d'
      state: directory
      owner: root
      group: root
      mode: '0755'
  when: inventory_hostname in groups.maintenance_contract
  tags: unattended-upgrade

- name: Override apt-daily timer
  ansible.builtin.copy:
      src: 'apt-daily.timer'
      dest: '/etc/systemd/system/apt-daily.timer.d/override.conf'
      owner: root
      group: root
      mode: '0644'
  when: inventory_hostname in groups.maintenance_contract
  tags: unattended-upgrade
  notify:
      - Restart apt-update-timer

- name: Create apt-daily-upgrade timer directory if it does not exist
  ansible.builtin.file:
      path: '/etc/systemd/system/apt-daily-upgrade.timer.d'
      state: directory
      owner: root
      group: root
      mode: '0755'
  when: inventory_hostname in groups.maintenance_contract
  tags: unattended-upgrade

- name: Override apt-daily-upgrade timer
  ansible.builtin.copy:
      src: 'apt-daily-upgrade.timer'
      dest: '/etc/systemd/system/apt-daily-upgrade.timer.d/override.conf'
      owner: root
      group: root
      mode: '0644'
  when: inventory_hostname in groups.maintenance_contract
  tags: unattended-upgrade
  notify:
      - Restart apt-upgrade-timer

- name: Create group {{ host_user }}
  ansible.builtin.group:
      name: "{{ host_user }}"

- name: Create user {{ host_user }}
  ansible.builtin.user:
      name: "{{ host_user }}"
      group: "{{ host_user }}"
      password: "{{ host_password | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
      generate_ssh_key: true
      ssh_key_file: .ssh/id_ed25519
      ssh_key_type: ed25519
      shell: /bin/bash
  register: publickey

- name: Save public key to hostvars for SFTP
  ansible.builtin.lineinfile:
      name: "host_vars/{{ inventory_hostname }}"
      regexp: "host_user_public_key:"
      line: "host_user_public_key: {{ publickey.ssh_public_key }}"
      mode: '0664'
  connection: local
  become: false
  delegate_to: localhost

- name: Create group {{ host_user2 }}
  ansible.builtin.group:
      name: "{{ host_user2 }}"
  when: host_user2 is defined

- name: Create user {{ host_user2 }}
  ansible.builtin.user:
      name: "{{ host_user2 }}"
      group: "{{ host_user2 }}"
      password: "{{ host_password2 | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
      generate_ssh_key: true
      ssh_key_file: .ssh/id_ed25519
      ssh_key_type: ed25519
      shell: /bin/bash
  when: host_user2 is defined

- name: Add user(s) in sudoers
  ansible.builtin.template:
      src: sudoers.j2
      dest: /etc/sudoers
      owner: root
      group: root
      mode: '440'
      validate: /usr/sbin/visudo -cf %s
  tags: sudoers

- name: Quiet nagios authentification
  ansible.builtin.copy:
      src: 'pam-sudo'
      dest: '/etc/pam.d/sudo'
      owner: root
      group: root
      mode: '0644'

- name: Add public key to authorized keys for {{ host_user }}
  ansible.posix.authorized_key:
      key: "{{ default_ssh_public_keys }}"
      user: "{{ host_user }}"
      exclusive: true
  tags: sshd

- name: Add public key to authorized keys for {{ host_user2 }}
  ansible.posix.authorized_key:
      key: "{{ host_user2_pubkey }}"
      user: "{{ host_user2 }}"
      exclusive: true
  when: host_user2 is defined and host_user2_pubkey is defined
  tags: sshd

- name: Make sure /etc/ssh/ssh_host_ed25519_key exists
  ansible.builtin.stat:
      path: /etc/ssh/ssh_host_ed25519_key
  register: ssh_host_exists
  tags: sshd

- name: Generate /etc/ssh/ssh_host_ed25519_key if missing
  ansible.builtin.command: ssh-keygen -A
  when: not ssh_host_exists.stat.exists and not ansible_check_mode
  tags: sshd

- name: Copy sshd_config file
  ansible.builtin.template:
      src: sshd_config.j2
      dest: /etc/ssh/sshd_config
      owner: root
      group: root
      mode: '0644'
      validate: /usr/sbin/sshd -t -f %s
  notify: Restart SSHD
  tags: sshd

- name: Enable SSH daemon service
  ansible.builtin.service:
      name: ssh
      enabled: true

- name: Copy bashrc file with session timeout
  ansible.builtin.copy:
      src: bash.bashrc
      dest: /etc/bash.bashrc
      owner: root
      group: root
      mode: '0644'
  when: ansible_os_family == "Debian"

- name: Add session timeout
  ansible.builtin.blockinfile:
      path: /etc/bashrc
      block: |
          TMOUT=900
          readonly TMOUT
          export TMOUT
  when: ansible_os_family == "RedHat"

- name: Enable ipv6 forwarding
  ansible.posix.sysctl:
      name: "net.ipv6.conf.all.forwarding"
      value: '1'
      sysctl_set: true

- name: Setup ipv6
  ansible.builtin.template:
      src: 51-ipv6.yaml.j2
      dest: /etc/netplan/51-ipv6.yaml
      owner: root
      group: root
      mode: '0644'
  when: ipv6_address is defined and inventory_hostname in groups['manual_ipv6']

- name: Set default path
  ansible.builtin.template:
      src: environment.j2
      dest: /etc/environment
      owner: root
      group: root
      mode: '0644'
  when: ansible_os_family == "Debian"

- name: Check if backup servers present in root known hosts
  ansible.builtin.lineinfile:
      path: /root/.ssh/known_hosts
      regexp: "{{ hostvars[item].host_server_public_key }}"
      state: absent
  check_mode: true
  changed_when: false
  register: known_hosts_line
  with_items: "{{ groups.backup_server }}"

- name: Add backup servers in root known host
  ansible.builtin.known_hosts:
      hash_host: true
      key: "{{ hostvars[item['item']].host_server_known_entry }}"
      name: "[{{ hostvars[item['item']].ansible_host }}]:{{ default_sshd_port }}"
  when: item.found is not defined
  with_items: "{{ known_hosts_line.results }}"

- name: Copy Installed Package Listing script on server
  ansible.builtin.template:
      src: collect_installed_packages_facts_{{ ansible_os_family }}.sh.j2
      dest: /root/collect_installed_packages_facts.sh
      owner: root
      group: root
      mode: '0700'

- name: Disable e-mailing of crontab
  ansible.builtin.cron:
      name: MAILTO
      env: true
      job: ""

- name: Add cron job to check installed packages every day
  ansible.builtin.cron:
      name: collect installed packages facts
      minute: "43"
      hour: "0"
      job: /root/collect_installed_packages_facts.sh
