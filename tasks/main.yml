---
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Correct the machine hostname to "{{ inventory_hostname_short }}"
  hostname: name="{{ inventory_hostname_short | lower | regex_replace('_','') }}"

- name: Debian Update repo and upgrade installed packages
  apt:
    update_cache: true
    upgrade: full
    autoremove: true
    force: true
    install_recommends: false
  async: 1200
  poll: 20
  when: not ansible_check_mode and ansible_os_family == "Debian"

- name: Debian check Update repo and upgrade installed packages
  apt:
    update_cache: true
    upgrade: full
    autoremove: true
    force: true
    install_recommends: false
  when: ansible_check_mode and ansible_os_family == "Debian"

- name: RedHat Update repo and upgrade installed packages
  yum:
    update_cache: true
    name: '*'
    state: latest
  when: ansible_os_family == "RedHat"

- name: Remove unecessary packages if present
  apt:
    name: "{{ packages_to_remove }}"
    autoremove: true
    purge: true
    state: absent
  when: ansible_os_family == "Debian"

- name: Remove unecessary files if present
  file:
    path: "{{ files_to_remove }}"
    state: absent
  when: ansible_os_family == "Debian"

- name: Remove unecessary users if present
  user:
    name: "{{ users_to_remove }}"
    remove: true
    state: absent

- name: Create {{ host_user }} group
  group:
    name: "{{ host_user }}"

- name: Create {{ host_user }} user
  user:
    name: "{{ host_user }}"
    group: "{{ host_user }}"
    password: "{{ host_password | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
    generate_ssh_key: true
    ssh_key_file: .ssh/id_ed25519
    ssh_key_type: ed25519
    shell: /bin/bash
  register: publickey

- name: Save public key to hostvars for SFTP
  lineinfile:
    name: "host_vars/{{ inventory_hostname }}"
    regexp: "host_user_public_key:"
    line: "host_user_public_key: {{ publickey.ssh_public_key }}"
    mode: '0664'
  connection: local
  become: false
  delegate_to: localhost

- name: Create {{ host_user2 }} group
  group:
    name: "{{ host_user2 }}"
  when: host_user2 is defined

- name: Create {{ host_user2 }} user
  user:
    name: "{{ host_user2 }}"
    group: "{{ host_user2 }}"
    password: "{{ host_password2 | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
    generate_ssh_key: true
    ssh_key_file: .ssh/id_ed25519
    ssh_key_type: ed25519
    shell: /bin/bash
  when: host_user2 is defined

- name: add user(s) in sudoers
  template:
    src: sudoers.j2
    dest: /etc/sudoers
    owner: root
    group: root
    mode: '440'
  tags: sudoers

- name: add public key to authorized keys for {{ host_user }}
  authorized_key:
    key: "{{ default_ssh_public_keys }}"
    user: "{{ host_user }}"
    exclusive: true
  tags: sshd

- name: add public key to authorized keys for {{ host_user2 }}
  authorized_key:
    key: "{{ host_user2_pubkey }}"
    user: "{{ host_user2 }}"
    exclusive: true
  when: host_user2 is defined and host_user2_pubkey is defined
  tags: sshd

- name: make sure /etc/ssh/ssh_host_ed25519_key exists
  stat:
    path: /etc/ssh/ssh_host_ed25519_key
  register: ssh_host_exists
  tags: sshd

- name: Generate /etc/ssh/ssh_host_ed25519_key if missing
  command: ssh-keygen -A
  when: not ssh_host_exists.stat.exists and not ansible_check_mode
  tags: sshd

- name: Copy sshd_config file
  template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: '0644'
  notify: restart-sshd
  tags: sshd

- name: Copy bashrc file with session timeout
  copy:
    src: bash.bashrc
    dest: /etc/bash.bashrc
    owner: root
    group: root
    mode: '0644'
  when: ansible_os_family == "Debian"

- name: Add session timeout
  blockinfile:
    path: /etc/bashrc
    block: |
      TMOUT=900
      readonly TMOUT
      export TMOUT
  when: ansible_os_family == "RedHat"

- name: disable ipv6
  sysctl:
    name: "{{ item }}"
    value: '1'
    sysctl_set: true
  with_items: "{{ sysctl_disable_ipv6_keys }}"

- name: set default path
  template:
    src: environment.j2
    dest: /etc/environment
    owner: root
    group: root
    mode: '0644'
  when: ansible_os_family == "Debian"

- name: Check if backup servers present in root known hosts
  lineinfile:
    path: /root/.ssh/known_hosts
    regexp: "{{ hostvars[item].host_server_public_key }}"
    state: absent
  check_mode: true
  changed_when: false
  register: known_hosts_line
  with_items: "{{ groups.backup_server }}"

- name: Add backup servers in root known host
  known_hosts:
    hash_host: true
    key: "{{ hostvars[item['item']].host_server_known_entry }}"
    name: "[{{ hostvars[item['item']].ansible_host }}]:{{ default_sshd_port }}"
  when: item.found is not defined
  with_items: "{{ known_hosts_line.results }}"

- name: Copy Installed Package Listing script on server
  template:
    src: collect_installed_packages_facts_{{ ansible_os_family }}.sh.j2
    dest: /root/collect_installed_packages_facts.sh
    owner: root
    group: root
    mode: '0700'

- name: disable e-mailing of crontab
  cron:
    name: MAILTO
    env: true
    job: ""

- name: add cron job to check installed packages every day
  cron:
    name: collect installed packages facts
    minute: "43"
    hour: "0"
    job: /root/collect_installed_packages_facts.sh
